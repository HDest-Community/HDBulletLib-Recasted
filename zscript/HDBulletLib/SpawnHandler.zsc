const HDCONST_HDBLEVENT = HDCONST_BPSPAWNPOOLEVENT + 1;

class HDBulletLibHandler : EventHandler {
    // [Ace] Order here must match bitshifting order in menudef and zscript files. - [Ted, UZ]
    static const class<HDAmmo> RemovedClasses[] = {
		'HDNDMLoose',
        'HDSlugAmmo',
        'HD500SWLightAmmo',
        'HD500SWHeavyAmmo',
        'HD50OMGAmmo',
        'HD45ACPAmmo',
        'HD10mAmmo',
        'HD45LCAmmo',
        'HDLLShellAmmo',
        'HDExplosiveShellAmmo',
        'HDGold45LCAmmo',
        'HDFlareAmmo',
        'HDBallAmmo',
        'HD4GSAmmo',
        'HD5mm_Ammo',
        'HD6mmFlechetteAmmo',
        'HD50AM_Ammo',
        'HDAurochsAmmo',
        'HD069BoreAmmo',
        'TenMilBrass',
        'Wan_ThuRKTAmmo',
        'Wan_TortRKTAmmo',
        'WAN_20mmGrenadeAmmo',
        'ThirtyAughtSixAmmo',
        'ThirtyAughtSixBrass',
        'HD4GBAmmo',
        'HDBirdshotShellAmmo',
        'Savage300Ammo',
        'HD762TokarevAmmo',
        'TokarevBrass',
        'Savage300Brass',
        'HD_776BeltLink', //[Eric] NOTE FOR FUTURE ADDITIONS: The first hdblib_enableammo CVAR is full as of this line. The next 32 entries below must use hdblib_enableammo_2.
        'HD_12MMBeltLink',
        'HD_35mmBeltLink'
    };

    // [Ace] Future-proofing. I doubt this library will ever have 32 * 3 ammo types and projectiles.
    private transient CVar AmmoSpawns[3];
    private HDAmBoxList AmmoBoxList;

    bool cvarsAvailable;

    // Populates the replacement and association arrays.
    void init() {

        cvarsAvailable = true;

        // Init enabled ammo CVARs
        for (let i = 0; i < 1 + RemovedClasses.Size() / 32; ++i) {
            if (!AmmoSpawns[i]) {
                AmmoSpawns[i] = CVar.GetCVar("hdblib_enableammo_"..(i + 1));
            }
        }
    }

    override void OnRegister() {
        SetOrder(HDCONST_HDBLEVENT);
    }

    override void WorldLoaded(worldevent e) {

        // Populates the main arrays if they haven't been already.
        if (!cvarsAvailable || !AmmoSpawns[0]) init();

        for (let i = 0; i < RemovedClasses.size(); i++) {
            if (!(AmmoSpawns[i / 32].GetInt() & (1 << (i % 32)))) {
                if (hd_debug) console.printf("Removing "..RemovedClasses[i].getClassName().." from Backpack Spawn Pool");

                BPSpawnPool.removeItem(RemovedClasses[i]);
            }
        }
    }

    override void WorldThingSpawned(WorldEvent e) {

        // Populates the main arrays if they haven't been already.
        if (!cvarsAvailable || !AmmoSpawns[0]) init();

        // [Ace] Only do it for the first ammo box encountered because they all share the same thinker.
        if (e.Thing is 'HDAmBox' && !AmmoBoxList) {
            AmmoBoxList = HDAmBoxList.Get();

            // Loop through all the names in the removed classes list.
            for (let i = 0; i < RemovedClasses.Size(); ++i) {

                // If we find the removed class in the AmmoBoxList, remove it
                if (!(AmmoSpawns[i / 32].GetInt() & (1 << (i % 32)))) {
                    int index = AmmoBoxList.InvClasses.Find(RemovedClasses[i].GetClassName());
                    if (index != AmmoBoxList.InvClasses.Size()) {
                        if (hd_debug) console.printf("Removing "..RemovedClasses[i].getClassName().." from Ammo Box Loot Table");

                        AmmoBoxList.InvClasses.Delete(index);
                    }
                }
            }
        }
    }

    private bool IsRemovedClass(class<HDAmmo> cls) {
        foreach (removedClass : RemovedClasses) if (cls == removedClass) return true;

        return false;
    }
}

// Struct for ammo spawning information.
class HDBLRSpawnAmmo play {
    // ID by string for spawner
    string spawnName;

    // ID by string for spawnees
    Array<HDBLRSpawnAmmoEntry> spawnReplaces;

    // Whether or not to persistently spawn.
    bool isPersistent;

    bool replaceAmmo;

    string toString() {

        let replacements = "[";

        foreach (replacee : spawnReplaces) replacements = replacements..", "..replacee.toString();

        replacements = replacements.."]";

        return String.format("{ spawnName=%s, spawnReplaces=%s, isPersistent=%b, replaceAmmo=%b }", spawnName, replacements, isPersistent, replaceAmmo);
    }
}

class HDBLRSpawnAmmoEntry play {
    string name;
    int    chance;

    string toString() {
        return String.format("{ name=%s, chance=%s }", name, chance >= 0 ? "1/"..(chance + 1) : "never");
    }
}

class HDBulletLibAmmoSpawner: EventHandler {
    // List of persistent classes to completely ignore.
    // This -should- mean this mod has no performance impact.
    static const string blacklist[] = {
        'HDSmoke',
        'BloodTrail',
        'CheckPuff',
        'WallChunk',
        'HDBulletPuff',
        'HDFireballTail',
        'ReverseImpBallTail',
        'HDSmokeChunk',
        'ShieldSpark',
        'HDFlameRed',
        'HDMasterBlood',
        'PlantBit',
        'HDBulletActor',
        'HDLadderSection'
    };

    // List of ammo spawn associations.
    // Used for ammo replacement on mapload.
    array<HDBLRSpawnAmmo> ammoSpawnList;

    bool cvarsAvailable;

    // appends an entry to ammoSpawnList;
    void addAmmo(string name, Array<HDBLRSpawnAmmoEntry> replacees, bool persists, bool rep=true) {

        if (hd_debug) {
            let msg = "Adding "..(persists ? "Persistent" : "Non-Persistent").." Replacement Entry for "..name..": [";

            foreach (replacee : replacees) msg = msg..", "..replacee.toString();

            console.printf(msg.."]");
        }

        // Creates a new struct;
        HDBLRSpawnAmmo spawnee = HDBLRSpawnAmmo(new('HDBLRSpawnAmmo'));

        // Populates the struct with relevant information,
        spawnee.spawnName = name;
        spawnee.isPersistent = persists;
        spawnee.replaceAmmo = rep;
        spawnee.spawnreplaces.copy(replacees);

        // Pushes the finished struct to the array.
        ammoSpawnList.push(spawnee);
    }

    HDBLRSpawnAmmoEntry addAmmoEntry(string name, int chance) {
        // Creates a new struct;
        HDBLRSpawnAmmoEntry spawnee = HDBLRSpawnAmmoEntry(new('HDBLRSpawnAmmoEntry'));
        spawnee.name = name;
        spawnee.chance = chance;
        return spawnee;
    }

    // Populates the replacement and association arrays.
    void init() {

        cvarsAvailable = true;

        // --------------------
        // Ammo spawn lists.
        // --------------------

        // 500 S&W Lights
        Array<HDBLRSpawnAmmoEntry> spawns_500SWL;
        spawns_500SWL.push(addAmmoEntry('ShellBoxRandom', hdb_500sw_shellbox_spawn_bias));
        addAmmo('HD500SWLightBoxPickup', spawns_500SWL, hdb_500sw_persistent_spawning);
        // 500 S&W Heavies
        Array<HDBLRSpawnAmmoEntry> spawns_500SWH;
        spawns_500SWH.push(addAmmoEntry('RocketBoxRandom', hdb_500sw_rocket_spawn_bias));
        spawns_500SWH.push(addAmmoEntry('RocketAmmo', hdb_500sw_rocket_spawn_bias));
        addAmmo('HD500SWHeavyBoxPickup', spawns_500SWH, hdb_500sw_persistent_spawning);
        // 500 S&W Casing
        Array<HDBLRSpawnAmmoEntry> spawns_500SWC;
        spawns_500SWC.push(addAmmoEntry('HDSpent9mm', hdb_500sw_casing_spawn_bias));
        spawns_500SWC.push(addAmmoEntry('HDSpent355', hdb_500sw_casing_spawn_bias));
        addAmmo('HDSpent500', spawns_500SWC, hdb_500sw_persistent_spawning);

        // 12 Gauge Slug Box
        Array<HDBLRSpawnAmmoEntry> spawns_12gslugbox;
        spawns_12gslugbox.push(addAmmoEntry('ShellBoxRandom', hdb_12gslug_shellbox_spawn_bias));
        addAmmo('SlugBoxPickup', spawns_12gslugbox, hdb_12gslug_persistent_spawning);
        // 12 Gauge Slug Pickup
        Array<HDBLRSpawnAmmoEntry> spawns_12gslugpick;
        spawns_12gslugpick.push(addAmmoEntry('ShellRandom', hdb_12gslug_shell_spawn_bias));
        addAmmo('SlugPickup', spawns_12gslugpick, hdb_12gslug_persistent_spawning);
        // 12 Gauge Slug Ammo
        Array<HDBLRSpawnAmmoEntry> spawns_12gslugammo;
        spawns_12gslugammo.push(addAmmoEntry('ShellRandom', hdb_12gslug_shell_spawn_bias));
        addAmmo('HDSlugAmmo', spawns_12gslugammo, hdb_12gslug_persistent_spawning);
        // 12 Gauge Slug Casing
        Array<HDBLRSpawnAmmoEntry> spawns_12gslugcase;
        spawns_12gslugcase.push(addAmmoEntry('HDSpentShell', hdb_12gslug_casing_spawn_bias));
        addAmmo('HDSpentSlug', spawns_12gslugcase, hdb_12gslug_persistent_spawning);

        // .451 Frei Box Pickup
        Array<HDBLRSpawnAmmoEntry> spawns_420freibox;
        spawns_420freibox.push(addAmmoEntry('ClipBoxPickup', hdb_420frei_box_spawn_bias));
        addAmmo('HD420BoxPickup', spawns_420freibox, hdb_420frei_persistent_spawning);
        // .451 Frei Casing
        Array<HDBLRSpawnAmmoEntry> spawns_420freicasing;
        spawns_420freicasing.push(addAmmoEntry('HDSpent9mm', hdb_420frei_casing_spawn_bias));
        spawns_420freicasing.push(addAmmoEntry('HDSpent355', hdb_420frei_casing_spawn_bias));
        addAmmo('HDSpent420', spawns_420freicasing, hdb_420frei_persistent_spawning);

        // .066 Bore Box Pickup
        Array<HDBLRSpawnAmmoEntry> spawns_069borebox;
        spawns_069borebox.push(addAmmoEntry('ShellBoxRandom', hdb_069bore_box_spawn_bias));
        addAmmo('HD069BoreBox', spawns_069borebox, hdb_069bore_persistent_spawning);
        // .066 Bore Casing
        Array<HDBLRSpawnAmmoEntry> spawns_069borecasing;
        spawns_069borecasing.push(addAmmoEntry('HDSpentShell', hdb_069bore_casing_spawn_bias));
        addAmmo('HDSpent069Bore', spawns_069borecasing, hdb_069bore_persistent_spawning);

        // 9mm NDM Box Pickup
        Array<HDBLRSpawnAmmoEntry> spawns_NDMbox;
        spawns_NDMbox.push(addAmmoEntry('ClipBoxPickup', hdb_NDM_box_spawn_bias));
        addAmmo('HDNDMBoxPickup', spawns_NDMbox, hdb_NDM_persistent_spawning);
        // 9mm NDM Casing
        Array<HDBLRSpawnAmmoEntry> spawns_NDMcasing;
        spawns_NDMcasing.push(addAmmoEntry('HDSpent9mm', hdb_NDM_casing_spawn_bias));
        spawns_NDMcasing.push(addAmmoEntry('HDSpent355', hdb_NDM_casing_spawn_bias));
        addAmmo('HDSpentNDM', spawns_NDMcasing, hdb_NDM_persistent_spawning);

        // .50 OMG Box Pickup
        Array<HDBLRSpawnAmmoEntry> spawns_50omgbox;
        spawns_50omgbox.push(addAmmoEntry('ClipBoxPickup', hdb_50omg_box_spawn_bias));
        spawns_50omgbox.push(addAmmoEntry('RocketBoxRandom', hdb_50omg_box_spawn_bias));
        addAmmo('HD50OMGBoxPickup', spawns_50omgbox, hdb_50omg_persistent_spawning);
        // .50 OMG Casing
        Array<HDBLRSpawnAmmoEntry> spawns_50omgcasing;
        spawns_50omgcasing.push(addAmmoEntry('HDCasingBits', hdb_50omg_casing_spawn_bias));
        addAmmo('HDSpent50OMG', spawns_50omgcasing, hdb_50omg_persistent_spawning);

        // .45 ACP Box Pickup
        Array<HDBLRSpawnAmmoEntry> spawns_45acpbox;
        spawns_45acpbox.push(addAmmoEntry('ClipBoxPickup', hdb_45acp_box_spawn_bias));
        addAmmo('HD45ACPBoxPickup', spawns_45acpbox, hdb_45acp_persistent_spawning);
        // .45 ACP Casing
        Array<HDBLRSpawnAmmoEntry> spawns_45acpcasing;
        spawns_45acpcasing.push(addAmmoEntry('HDSpent9mm', hdb_45acp_casing_spawn_bias));
        addAmmo('HDSpent45ACP', spawns_45acpcasing, hdb_45acp_persistent_spawning);

        // 10mm Box Pickup
        Array<HDBLRSpawnAmmoEntry> spawns_10mmBox;
        spawns_10mmBox.push(addAmmoEntry('ClipBoxPickup', hdb_10mm_box_spawn_bias));
        addAmmo('HD10mBoxPickup', spawns_10mmBox, hdb_10mm_persistent_spawning);
        // 10mm Casing
        Array<HDBLRSpawnAmmoEntry> spawns_10mmBrass;
        spawns_10mmBrass.push(addAmmoEntry('HDSpent9mm', hdb_10mm_casing_spawn_bias));
        spawns_10mmBrass.push(addAmmoEntry('HDSpent355', hdb_10mm_casing_spawn_bias));
        addAmmo('HDSpent10mm', spawns_10mmBrass, hdb_10mm_persistent_spawning);

        // .45 LC Box Pickup
        Array<HDBLRSpawnAmmoEntry> spawns_45lcbox;
        spawns_45lcbox.push(addAmmoEntry('ClipBoxPickup', hdb_45lc_box_spawn_bias));
        addAmmo('HD45LCBoxPickup', spawns_45lcbox, hdb_45lc_persistent_spawning);
        // .45 LC Casing
        Array<HDBLRSpawnAmmoEntry> spawns_45lccasing;
        spawns_45lccasing.push(addAmmoEntry('HDSpent355', hdb_45lc_casing_spawn_bias));
        addAmmo('HDSpent45LC', spawns_45lccasing, hdb_45lc_persistent_spawning);

        // Gold .45 LC Box Pickup
        Array<HDBLRSpawnAmmoEntry> spawns_g45lcbox;
        spawns_g45lcbox.push(addAmmoEntry('ClipBoxPickup', hdb_g45lc_box_spawn_bias));
        addAmmo('HDGold45LCBoxPickup', spawns_g45lcbox, hdb_g45lc_persistent_spawning);
        // Gold .45 LC Casing
        Array<HDBLRSpawnAmmoEntry> spawns_g45lccasing;
        spawns_g45lccasing.push(addAmmoEntry('HDSpent355', hdb_g45lc_casing_spawn_bias));
        addAmmo('HDSpentGold45LC', spawns_g45lccasing, hdb_g45lc_persistent_spawning);

        // Less-Lethal Shell Box
        Array<HDBLRSpawnAmmoEntry> spawns_llsbox;
        spawns_llsbox.push(addAmmoEntry('ShellBoxRandom', hdb_LLS_shellbox_spawn_bias));
        addAmmo('LLShellBoxPickup', spawns_llsbox, hdb_LLS_persistent_spawning);
        // Less-Lethal Shell Pickup
        Array<HDBLRSpawnAmmoEntry> spawns_llspickup;
        spawns_llspickup.push(addAmmoEntry('ShellRandom', hdb_LLS_shell_spawn_bias));
        addAmmo('LLShellPickup', spawns_llspickup, hdb_LLS_persistent_spawning);
        // Less-Lethal Shell Ammo
        Array<HDBLRSpawnAmmoEntry> spawns_llsammo;
        spawns_llsammo.push(addAmmoEntry('ShellRandom', hdb_LLS_shell_spawn_bias));
        addAmmo('HDLLShellAmmo', spawns_llsammo, hdb_LLS_persistent_spawning);
        // Less-Lethal Shell Casing
        Array<HDBLRSpawnAmmoEntry> spawns_llscasing;
        spawns_llscasing.push(addAmmoEntry('HDSpentShell', hdb_LLS_casing_spawn_bias));
        addAmmo('HDLLSpentShell', spawns_llscasing, hdb_LLS_persistent_spawning);

        // Explosive Slug Box
        Array<HDBLRSpawnAmmoEntry> spawns_eslugbox;
        spawns_eslugbox.push(addAmmoEntry('ShellBoxRandom', hdb_ESlug_shellbox_spawn_bias));
        addAmmo('ExplosiveShellBoxPickup', spawns_eslugbox, hdb_ESlug_persistent_spawning);
        // Explosive Slug Pickup
        Array<HDBLRSpawnAmmoEntry> spawns_elugpickup;
        spawns_elugpickup.push(addAmmoEntry('ShellRandom', hdb_ESlug_shell_spawn_bias));
        addAmmo('ExplosiveShellPickup', spawns_elugpickup, hdb_ESlug_persistent_spawning);
        // Explosive Slug Ammo
        Array<HDBLRSpawnAmmoEntry> spawns_eslugammo;
        spawns_eslugammo.push(addAmmoEntry('ShellRandom', hdb_ESlug_shell_spawn_bias));
        addAmmo('HDExplosiveShellAmmo', spawns_eslugammo, hdb_ESlug_persistent_spawning);
        // Explosive Slug Casing
        Array<HDBLRSpawnAmmoEntry> spawns_eslugcasing;
        spawns_eslugcasing.push(addAmmoEntry('HDSpentShell', hdb_ESlug_casing_spawn_bias));
        addAmmo('HDSpentExplosiveShell', spawns_eslugcasing, hdb_ESlug_persistent_spawning);

        // Flare Shell Box
        Array<HDBLRSpawnAmmoEntry> spawns_fshellbox;
        spawns_fshellbox.push(addAmmoEntry('ShellBoxRandom', hdb_FShell_shellbox_spawn_bias));
        addAmmo('FlareShellBoxPickup', spawns_fshellbox, hdb_FShell_persistent_spawning);
        // Flare Shell Pickup
        Array<HDBLRSpawnAmmoEntry> spawns_fshellpickup;
        spawns_fshellpickup.push(addAmmoEntry('ShellRandom', hdb_FShell_shell_spawn_bias));
        addAmmo('FlareShellPickup', spawns_fshellpickup, hdb_FShell_persistent_spawning);
        // Flare Shell Ammo
        Array<HDBLRSpawnAmmoEntry> spawns_fshellammo;
        spawns_fshellammo.push(addAmmoEntry('ShellRandom', hdb_FShell_shell_spawn_bias));
        addAmmo('HDFlareAmmo', spawns_fshellammo, hdb_FShell_persistent_spawning);

        // .56 Caliber Musket Ball
        Array<HDBLRSpawnAmmoEntry> spawns_mball;
        spawns_mball.push(addAmmoEntry('HDSpent9mm', hdb_MBall_casing_spawn_bias));
        spawns_mball.push(addAmmoEntry('HDSpent355', hdb_MBall_casing_spawn_bias));
        spawns_mball.push(addAmmoEntry('HDSpentShell', hdb_MBall_casing_spawn_bias));
        addAmmo('HDBallAmmo', spawns_mball, hdb_MBall_persistent_spawning);

        // 4-Gauge Saboted Slug Box
        Array<HDBLRSpawnAmmoEntry> spawns_4gssbox;
        spawns_4gssbox.push(addAmmoEntry('ShellBoxRandom', hdb_4gss_shellbox_spawn_bias));
        addAmmo('HD4GSSpawn', spawns_4gssbox, hdb_4gss_persistent_spawning);
        // 4-Gauge Saboted Slug Pickup
        Array<HDBLRSpawnAmmoEntry> spawns_4gsspickup;
        spawns_4gsspickup.push(addAmmoEntry('ShellRandom', hdb_4gss_shell_spawn_bias));
        addAmmo('HDFumbled4GS', spawns_4gsspickup, hdb_4gss_persistent_spawning);
        // 4-Gauge Saboted Slug Ammo
        Array<HDBLRSpawnAmmoEntry> spawns_4gssammo;
        spawns_4gssammo.push(addAmmoEntry('ShellRandom', hdb_4gss_shell_spawn_bias));
        addAmmo('HD4GSAmmo', spawns_4gssammo, hdb_4gss_persistent_spawning);
        // 4-Gauge Saboted Slug Casing
        Array<HDBLRSpawnAmmoEntry> spawns_4gsscasing;
        spawns_4gsscasing.push(addAmmoEntry('HDSpentShell', hdb_4gss_casing_spawn_bias));
        addAmmo('HDSpent4GS', spawns_4gsscasing, hdb_4gss_persistent_spawning);

        // 5mm Bumblebee Rimfire Box Pickup
        Array<HDBLRSpawnAmmoEntry> spawns_5mmbox;
        spawns_5mmbox.push(addAmmoEntry('ClipBoxPickup', hdb_5mm_box_spawn_bias));
        addAmmo('PB_5mmBoxPickup', spawns_5mmbox, hdb_5mm_persistent_spawning);
        // 5mm Bumblebee Rimfire Casing
        Array<HDBLRSpawnAmmoEntry> spawns_5mmcasing;
        spawns_5mmcasing.push(addAmmoEntry('HDSpent9mm', hdb_5mm_casing_spawn_bias));
        addAmmo('HDSpent5mmMR', spawns_5mmcasing, hdb_5mm_persistent_spawning);

        // .50 Action Mega Box Pickup
        Array<HDBLRSpawnAmmoEntry> spawns_50ambox;
        spawns_50ambox.push(addAmmoEntry('ClipBoxPickup', hdb_50am_box_spawn_bias));
        addAmmo('PB_50AMBoxPickup', spawns_50ambox, hdb_50am_persistent_spawning);
        // .50 Action Mega Casing
        Array<HDBLRSpawnAmmoEntry> spawns_50amcasing;
        spawns_50amcasing.push(addAmmoEntry('HDSpent9mm', hdb_50am_casing_spawn_bias));
        spawns_50amcasing.push(addAmmoEntry('HDSpent355', hdb_50am_casing_spawn_bias));
        addAmmo('HDSpent50AM', spawns_50amcasing, hdb_50am_persistent_spawning);

        // 6mm Flechette Box Pickup
        Array<HDBLRSpawnAmmoEntry> spawns_6mmBox;
        spawns_6mmBox.push(addAmmoEntry('ClipBoxPickup', hdb_6mm_box_spawn_bias));
        addAmmo('HD6mmFlechetteBoxPickup', spawns_6mmBox, hdb_6mm_persistent_spawning);
        // 6mm Flechette Casing
        Array<HDBLRSpawnAmmoEntry> spawns_6mmcasing;
        spawns_6mmcasing.push(addAmmoEntry('HDSpent9mm', hdb_6mm_casing_spawn_bias));
        addAmmo('HDSpent6mmFlechette', spawns_6mmcasing, hdb_6mm_persistent_spawning);

        // 20mm Grenade Ammo
        Array<HDBLRSpawnAmmoEntry> spawns_20mmgrenades;
        spawns_20mmgrenades.push(addAmmoEntry('RocketBoxRandom', hdb_20mm_rbox_spawn_bias));
        addAmmo('WAN_20mmGrenadeBox', spawns_20mmgrenades, hdb_20mm_persistent_spawning);

        // Thunder Rockets
        Array<HDBLRSpawnAmmoEntry> spawns_thunderrockets;
        spawns_thunderrockets.push(addAmmoEntry('RocketBoxRandom', hdb_ThuRKT_rbox_spawn_bias));
        addAmmo('WAN_ThuRKTAmmo', spawns_thunderrockets, hdb_ThuRKT_persistent_spawning);

        // Tortoise Missiles
        Array<HDBLRSpawnAmmoEntry> spawns_tortrockets;
        spawns_tortrockets.push(addAmmoEntry('RocketBoxRandom', hdb_TortRKT_rbox_spawn_bias));
        addAmmo('Wan_TortRktAmmo', spawns_tortrockets, hdb_TortRKT_persistent_spawning);

        // .30-06 Box Pickup
        Array<HDBLRSpawnAmmoEntry> spawns_3006box;
        spawns_3006box.push(addAmmoEntry('ClipBoxPickup', hdb_3006_box_spawn_bias));
        spawns_3006box.push(addAmmoEntry('RocketAmmo', hdb_3006_box_spawn_bias));
        addAmmo('HD3006BoxPickup', spawns_3006box, hdb_3006_persistent_spawning);
        // .30-06 Casing/Brass
        Array<HDBLRSpawnAmmoEntry> spawns_3006casing;
        spawns_3006casing.push(addAmmoEntry('HDCasingBits', hdb_3006_casing_spawn_bias));
        addAmmo('HDSpent3006', spawns_3006casing, hdb_3006_persistent_spawning);

        // 4-Gauge Buckshot Box
        Array<HDBLRSpawnAmmoEntry> spawns_4gbsbox;
        spawns_4gbsbox.push(addAmmoEntry('ShellBoxRandom', hdb_4gbs_shellbox_spawn_bias));
        addAmmo('HD4GBBox', spawns_4gbsbox, hdb_4gbs_persistent_spawning);
        // 4-Gauge Buckshot Pickup
        Array<HDBLRSpawnAmmoEntry> spawns_4gbspickup;
        spawns_4gbspickup.push(addAmmoEntry('ShellRandom', hdb_4gbs_shell_spawn_bias));
        addAmmo('HD4GBPickup', spawns_4gbspickup, hdb_4gbs_persistent_spawning);
        // 4-Gauge Buckshot Ammo
        Array<HDBLRSpawnAmmoEntry> spawns_4gbsammo;
        spawns_4gbsammo.push(addAmmoEntry('ShellRandom', hdb_4gbs_shell_spawn_bias));
        addAmmo('HD4GBAmmo', spawns_4gbsammo, hdb_4gbs_persistent_spawning);
        // 4-Gauge Buckshot Casing
        Array<HDBLRSpawnAmmoEntry> spawns_4gbscasing;
        spawns_4gbscasing.push(addAmmoEntry('HDSpentShell', hdb_4gbs_casing_spawn_bias));
        addAmmo('HDSpent4GB', spawns_4gbscasing, hdb_4gbs_persistent_spawning);

        // Birdshot Box
        Array<HDBLRSpawnAmmoEntry> spawns_birdbox;
        spawns_birdbox.push(addAmmoEntry('ShellBoxRandom', hdb_bird_shellbox_spawn_bias));
        addAmmo('BirdshotShellBoxPickup', spawns_birdbox, hdb_bird_persistent_spawning);
        // Birdshot Pickup
        Array<HDBLRSpawnAmmoEntry> spawns_birdpickup;
        spawns_birdpickup.push(addAmmoEntry('ShellRandom', hdb_bird_shell_spawn_bias));
        addAmmo('BirdshotShellPickup', spawns_birdpickup, hdb_bird_persistent_spawning);
        // Birdshot Ammo
        Array<HDBLRSpawnAmmoEntry> spawns_birdammo;
        spawns_birdammo.push(addAmmoEntry('ShellRandom', hdb_bird_shell_spawn_bias));
        addAmmo('HDBirdshotShellAmmo', spawns_birdammo, hdb_bird_persistent_spawning);
        // Birdshot Casing
        Array<HDBLRSpawnAmmoEntry> spawns_birdcasing;
        spawns_birdcasing.push(addAmmoEntry('HDSpentShell', hdb_bird_casing_spawn_bias));
        addAmmo('HDSpentBirdshotShell', spawns_birdcasing, hdb_bird_persistent_spawning);

        // .300 Savage Box Pickup
        Array<HDBLRSpawnAmmoEntry> spawns_300savagebox;
        spawns_300savagebox.push(addAmmoEntry('ShellBoxRandom', hdb_300savage_shellbox_spawn_bias));
        addAmmo('HDSavage300BoxPickup', spawns_300savagebox, hdb_300savage_persistent_spawning);
        // .300 Savage Pickup
        Array<HDBLRSpawnAmmoEntry> spawns_300savagepickup;
        spawns_300savagepickup.push(addAmmoEntry('ShellRandom', hdb_300savage_shell_spawn_bias));
        addAmmo('HDSavage300Pickup', spawns_300savagepickup, hdb_300savage_persistent_spawning);
        // .300 Savage Ammo
        Array<HDBLRSpawnAmmoEntry> spawns_300savageammo;
        spawns_300savageammo.push(addAmmoEntry('ShellRandom', hdb_300savage_shell_spawn_bias));
        addAmmo('Savage300Ammo', spawns_300savageammo, hdb_300savage_persistent_spawning);
        // .300 Savage Casing
        Array<HDBLRSpawnAmmoEntry> spawns_300savage_casing;
        spawns_300savage_casing.push(addAmmoEntry('HDCasingBits', hdb_300savage_casing_spawn_bias));
        addAmmo('Savage300Brass', spawns_300savage_casing, hdb_300savage_persistent_spawning);

        // 7.62 Tokarev Box Pickup
        Array<HDBLRSpawnAmmoEntry> spawns_7Tokarev_Box;
        spawns_7Tokarev_Box.push(addAmmoEntry('ClipBoxPickup', hdb_7tokarev_box_spawn_bias));
        addAmmo('HD762TokarevBoxPickup', spawns_7Tokarev_Box, hdb_7tokarev_persistent_spawning);
        // 7.62 Tokarev Casing
        Array<HDBLRSpawnAmmoEntry> spawns_7Tokarev_Brass;
        spawns_7Tokarev_Brass.push(addAmmoEntry('HDSpent9mm', hdb_7tokarev_casing_spawn_bias));
        addAmmo('TokarevBrass', spawns_7Tokarev_Brass, hdb_7tokarev_persistent_spawning);
    }

    // Random stuff, stores it and forces negative values just to be 0.
    bool giveRandom(int chance) {
        if (chance > -1) {
            let result = random(0, chance);

            if (hd_debug) console.printf("Rolled a "..(result + 1).." out of "..(chance + 1));

            return result == 0;
        }

        return false;
    }

    // Tries to replace the item during spawning.
    bool tryReplaceAmmo(ReplaceEvent e, string spawnName, int chance) {
        if (giveRandom(chance)) {
            if (hd_debug) console.printf(e.replacee.getClassName().." -> "..spawnName);

            e.replacement = spawnName;

            return true;
        }

        return false;
    }

    // Tries to create the ammunition via random spawning.
    bool tryCreateAmmo(Actor thing, string spawnName, int chance) {
        if (giveRandom(chance)) {
            if (hd_debug) console.printf(thing.getClassName().." + "..spawnName);

            Actor.Spawn(spawnName, thing.pos);

            return true;
        }

        return false;
    }

    override void worldLoaded(WorldEvent e) {

        // Populates the main arrays if they haven't been already.
        if (!cvarsAvailable) init();
    }

    override void checkReplacement(ReplaceEvent e) {

        // Populates the main arrays if they haven't been already.
        if (!cvarsAvailable) init();

        // If there's nothing to replace or if the replacement is final, quit.
        if (!e.replacee || e.isFinal) return;

        // If thing being replaced is blacklisted, quit.
        foreach (bl : blacklist) if (e.replacee is bl) return;

        string candidateName = e.replacee.getClassName();

        // If current map is Range, quit.
        if (level.MapName == 'RANGE') return;

        handleAmmoReplacements(e, candidateName);
    }

    override void worldThingSpawned(WorldEvent e) {

        // Populates the main arrays if they haven't been already.
        if (!cvarsAvailable) init();

        // If thing spawned doesn't exist, quit
        if (!e.thing) return;

        // If thing spawned is blacklisted, quit
        foreach (bl : blacklist) if (e.thing is bl) return;

        string candidateName = e.thing.getClassName();

        // Pointers for specific classes.
        let ammo = HDAmmo(e.thing);

        // If the current map is Range, quit.
        if (level.MapName == 'RANGE') return;

        handleAmmoSpawns(e.thing, ammo, candidateName);
    }

    private void handleAmmoReplacements(ReplaceEvent e, string candidateName) {

        // Checks if the level has been loaded more than 1 tic.
        bool prespawn = !(level.maptime > 1);

        // Iterates through the list of ammo candidates for e.replacee.
        foreach (ammoSpawn : ammoSpawnList) {

            if ((prespawn || ammoSpawn.isPersistent) && ammoSpawn.replaceAmmo) {
                foreach (spawnReplace : ammoSpawn.spawnReplaces) {
                    if (spawnReplace.name ~== candidateName) {
                        if (hd_debug) console.printf("Attempting to replace "..candidateName.." with "..ammoSpawn.spawnName.."...");

                        if (tryReplaceAmmo(e, ammoSpawn.spawnName, spawnReplace.chance)) return;
                    }
                }
            }
        }
    }

    private void handleAmmoSpawns(Actor thing, HDAmmo ammo, string candidateName) {

        // Checks if the level has been loaded more than 1 tic.
        bool prespawn = !(level.maptime > 1);

        // Iterates through the list of item candidates for e.thing.
        foreach (ammoSpawn : ammoSpawnList) {

            // if an item is owned or is an ammo (doesn't retain owner ptr),
            // do not replace it.
            let item = Inventory(thing);
            if (
                (prespawn || ammoSpawn.isPersistent)
             && (!(item && item.owner) && prespawn)
             && !ammoSpawn.replaceAmmo
            ) {
                foreach (spawnReplace : ammoSpawn.spawnReplaces) {
                    if (spawnReplace.name ~== candidateName) {
                        if (hd_debug) console.printf("Attempting to spawn "..ammoSpawn.spawnName.." with "..candidateName.."...");

                        if (tryCreateAmmo(thing, ammoSpawn.spawnName, spawnReplace.chance)) return;
                    }
                }
            }
        }
    }
}
