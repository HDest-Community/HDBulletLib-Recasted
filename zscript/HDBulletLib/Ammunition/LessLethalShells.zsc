// ------------------------------
// CREATED BY SWAMPYRAD
// ------------------------------

class HDLLShellAmmo:HDRoundAmmo{
	default{
		+inventory.ignoreskill
		+hdpickup.multipickup
		inventory.pickupmessage "$PICKUP_LESSLETHALSHELL";
		scale 0.3;
		tag "$TAG_LLSHELL";
		hdpickup.refid "LLS";
		hdpickup.bulk ENC_SHELL;
		inventory.icon "LLS4A0";
	}
	override void SplitPickup(){
		SplitPickupBoxableRound(4,20,"LLShellBoxPickup","LLS4A0","LLS1A0");
	}
	override string pickupmessage(){
		if(amount>1)return "$PICKUP_LESSLETHALSHELLS";
		return super.pickupmessage();
	}
	states{
	spawn:
		lls1 A -1;
		stop;
	death:
		ELLS A -1{
			if(Wads.CheckNumForName("id",0)==-1)A_SetTranslation("FreeShell");
			frame=randompick(0,0,0,0,4,4,4,4,2,2,5);
		}stop;
	}
}
class HDLLSpentShell:HDDebris{
	default{
		-noteleport +forcexybillboard
		seesound "misc/casing2";scale 0.3;height 2;radius 2;
		bouncefactor 0.5;
	}
	override void postbeginplay(){
		super.postbeginplay();
		if(Wads.CheckNumForName("id",0)==-1)A_SetTranslation("FreeShell");
		if(vel==(0,0,0))A_ChangeVelocity(0.0001,0,-0.1,CVF_RELATIVE);
	}
	vector3 lastvel;
	override void Tick(){
		if(!isFrozen())lastvel=vel;
		super.Tick();
	}
	states{
	spawn:
		ELLS ABCDEFGH 2;
		loop;
	death:
		ELLS A -1{
			frame=randompick(0,0,0,0,4,4,4,4,2,2,5);
		}stop;
	}
}

class HDLLFumblingShell:HDSpentShell{
	default{
		bouncefactor 0.3;
	}
	states{
	spawn:
		ELLS ABCDEFGH 2;
		loop;
	death:
		TNT1 A 0{
			let sss=spawn("HDLLShellAmmo",pos);
			sss.vel.xy=lastvel.xy+lastvel.xy.unit()*abs(lastvel.z);
			sss.setstatelabel("death");
			if(sss.vel.x||sss.vel.y){
				sss.A_FaceMovementDirection();
				sss.angle+=90;
				sss.frame=randompick(0,4);
			}else sss.frame=randompick(0,0,0,4,4,4,2,2,5);
			inventory(sss).amount=1;
		}stop;
	}
}

class LLShellBoxPickup:HDUPK{
	default{
		//$Category "Ammo/Hideous Destructor/"
		//$Title "Box of Less-Lethal Shells"
		//$Sprite "LLBXA0"
		scale 0.4;
		hdupk.amount 20;
		hdupk.pickupsound "weapons/pocket";
		hdupk.pickupmessage "$PICKUP_LESSLETHALSHELLBOX";
		hdupk.pickuptype "HDLLShellAmmo";
		translation "160:167=80:105";
	}
	states{
	spawn:
		LLBX A -1 nodelay{
			if(Wads.CheckNumForName("id",0)==-1)scale=(0.25,0.25);
		}
	}
}
class LLShellPickup:IdleDummy{
	default{
		//$Category "Ammo/Hideous Destructor/"
		//$Title "Four Less-Lethal Shells"
		//$Sprite "LLS4A0"
	}
	states{
	spawn:
		LLS4 A 0 nodelay{
			let iii=hdpickup(spawn("HDLLShellAmmo",pos,ALLOW_REPLACE));
			if(iii){
				hdf.transferspecials(self,iii,hdf.TS_ALL);
				iii.amount=4;
			}
		}stop;
	}
}

class HDB_00Rubber:HDBulletActor{
	default{
		pushfactor 5;
		mass 150;
		speed HDCONST_MPSTODUPT*225;//slower than standard shells
		accuracy 200;
		stamina 838;
		woundhealth 0;
		hdbulletactor.hardness -25;
	}
	 override void onhitactor(actor hitactor,vector3 hitpos,vector3 vu,int flags){
        super.onhitactor(hitactor,hitpos,vu,flags);
			
		
		if(!hitactor.bshootable)return;
		tracer=hitactor;
		double hitangle=absangle(angle,angleto(hitactor)); //0 is dead centre
		double pen=0;

		let hdaa=hdactor(hitactor);
		let hdmb=hdmobbase(hitactor);
		let hdp=hdplayerpawn(hitactor);

		//because radius alone is not correct
		double deemedwidth=hitactor.radius*0;


		//checks for standing character with gaps between feet and next to head
		if(
			abs(pitch)<70&&
			(
				(
					hdmb
					&&hitactor.height>hdmb.liveheight*0.7
				)||hitactor.height>hitactor.default.height*0.7
			)
		){
			//pass over shoulder
			//intended to be somewhat bigger than the visible head on any sprite
			if(
				(
					hdp
					||(
						hdmb&&hdmb.bsmallhead
					)
				)&&(
					0.8<
					min(
						pos.z-hitactor.pos.z,
						pos.z+vu.z*hitactor.radius*0.6-hitactor.pos.z
					)/hitactor.height
				)
			){
				if(hitangle>30.)return;
				deemedwidth*=0.6;
			}
			//randomly pass through putative gap between legs and feet
			if(
				(
					hdp
					||(
						hdmb
						&&hdmb.bbiped
					)
				)
			){
				double aat=angleto(hitactor);
				double haa=hitactor.angle;
				aat=min(absangle(aat,haa),absangle(aat,haa+180));

				haa=max(
					pos.z-hitactor.pos.z,
					pos.z+vu.z*hitactor.radius-hitactor.pos.z
				)/hitactor.height;

				//do the rest only if the shot is low enough
				if(haa<0.35){
					//if directly in front or behind, assume the space exists
					if(aat<7.){
						if(hitangle<7.)return;
					}else{
						//if not directly in front, increase space as you go down
						//this isn't actually intended to reflect any particular sprite
						int whichtick=level.time&(1|2); //0,1,2,3
						if(hitangle<4.+whichtick*(1.-haa))return;
					}
				}
			}
		}



		//determine bullet resistance
		double penshell;
		if(hdaa)penshell=max(hdaa.bulletresistance(hitangle),hdaa.bulletshell(hitpos,hitangle));
		else penshell=0.6;

		bool hitactoristall=hitactor.height>hitactor.radius*2;


		//process all items (e.g. armour) that may affect the bullet
		array<HDDamageHandler> handlers;
		HDDamageHandler.GetHandlers(hitactor,handlers); 
		for(int i = 0; i < handlers.Size(); i++){
			[pen,penshell]=handlers[i].OnBulletImpact(
				self,
				pen,
				penshell,
				hitangle,
				deemedwidth,
				hitpos,
				vu,
				hitactoristall
			);

			//the +canblast stops this so it can be reused in the explosion code
			if(!self||(!bmissile&&!bcanblast))return;
		}

		if(penshell<=0)penshell=0;
		else penshell*=1.-frandom(0,hitangle*0.004);

		if(hd_debug)A_Log("Armour: "..pen.."    -"..penshell.."    = "..pen-penshell.."     "..hitactor.gettag());

		//apply final armour
		pen-=penshell;

		//deform the bullet
		hardness=max(1,hardness-random(0,random(0,3)));
		stamina=max(1,stamina+random(0,(stamina>>1)));

		//immediate impact
		//highly random
		double tinyspeedsquared=speed*speed*0.000001;
		double impact=tinyspeedsquared*0.2*mass;


		//wounding system requires an int for pen - spread this out a bit
		if(pen<1.)pen=frandom(0,1)<pen;


		//check if going right through the body
		if(pen>deemedwidth-0.02*hitangle)flags|=BLAF_ALLTHEWAYTHROUGH;


		//bullet hits without penetrating
		//abandon all damage after impact, then check ricochet
		if(pen<deemedwidth*0.01){
			//if bullet too soft and/or slow, just die
			if(
				speed<16
				||hardness<random(1,3)
				||!random(0,6)
			)bulletdie();

			//randomly deflect
			//if deflected, reduce impact
			if(
				bmissile
				&&hitangle>10
			){
				double dump=clamp(0.011*(90-hitangle),0.01,1.);
				impact*=dump;
				speed*=(1.-dump);
				angle+=frandom(10,25)*randompick(1,-1);
				pitch+=frandom(-25,25);
				A_ChangeVelocity(cos(pitch)*speed,0,sin(-pitch)*speed,CVF_RELATIVE|CVF_REPLACE);
			}


			//apply impact damage
			if(impact>(hitactor.spawnhealth()>>2))hdmobbase.forcepain(hitactor);
			if(hd_debug)console.printf(hitactor.getclassname().." resisted, impact:  "..impact);
			hitactor.damagemobj(self,target,int(impact)<<2,"melee",DMG_NO_ARMOR);
			if(!bcanblast)bulletdie();
			return;
		}


		//both impact and temp cavity do melee
		impact+=speed*speed*(
			(flags&BLAF_ALLTHEWAYTHROUGH)?
			0.00006:
			0.00009
		);

		int shockbash=int(max(impact,impact*min(pen,deemedwidth))*(frandom(0.2,0.25)+stamina*0.00001));
		if(hd_debug)console.printf("     "..shockbash.." temp cav dmg");

		if(
			!HDMobBase(hitactor)
			&&!HDPlayerPawn(hitactor)
		)shockbash>>=3;
    


    //trigger incap on hit
    //code borrowed from Melonades stone ZScript

		if(HDMobBase(hitactor) 
    && !HDMobBase(hitactor).bNOINCAP 
    && hitactor.health>0
    && hitactor.ResolveState("falldown")
    && !hitactor.InStateSequence
        (hitactor.CurState, 
          hitactor.ResolveState("falldown"))
  ){
			hitactor.SetStateLabel("falldown");
    HDMobBase(hitactor).stunned=+(shockbash>>9);	
    }


		//apply impact/tempcav damage
		bnoextremedeath=impact<(hitactor.gibhealth<<3);
		hitactor.damagemobj(self,target,shockbash,"melee",DMG_THRUSTLESS|DMG_NO_ARMOR);
		if(!hitactor)return;
		bnoextremedeath=true;


		//basic threshold bleeding
		//proportionate to permanent wound channel
		//stamina, pushfactor, hardness
		double channelwidth=0;
		//reduce momentum, increase tumbling, etc.
		double totalresistance=deemedwidth*((!!hdmb)?hdmb.bulletresistance(hitangle):0.6);
		angle+=frandom(-pushfactor,pushfactor)*totalresistance;
		pitch+=frandom(-pushfactor,pushfactor)*totalresistance;
		speed=max(0,speed-frandom(0,pushfactor)*totalresistance*10);
		A_ChangeVelocity(cos(pitch)*speed,0,-sin(pitch)*speed,CVF_RELATIVE|CVF_REPLACE);

		if(flags&BLAF_ALLTHEWAYTHROUGH)channelwidth*=0;
		else bulletdie();


		//add size of channel to damage
		int chdmg=0;

		//see if the bullet may actually gib
		bnoextremedeath=(chdmg<(max(hitactor.spawnhealth(),gibhealth)<<4));
		if(hd_debug)console.printf(hitactor.getclassname().."  wound channel:  "..channelwidth.." x "..pen.."    channel HP damage: "..chdmg);

		//inflict wound
		if(multiplayer&&target&&hitactor.isteammate(target))channelwidth*=teamdamage;
		if(channelwidth==0)hdbleedingwound.inflict(
			hitactor,int(pen*3),int(channelwidth),(flags&BLAF_SUCKINGWOUND),source:target
		);

		//evaluate cns hit/critical and apply damage
		if(
			pen>deemedwidth*0.4
			&&hitangle<12+frandom(0,tinyspeedsquared*7+stamina*0.001)
		){
			double mincritheight=hitactor.height*0.6;
			double basehitz=hitpos.z-hitactor.pos.z;
			if(
				basehitz>mincritheight
				||basehitz+pen*vu.z>mincritheight
			){
				if(hd_debug)console.printf("CRIT!");
				int critdmg=int(
					(chdmg+random((stamina>>5),(stamina>>5)+(int(speed)>>6)))
					*(1.+pushfactor*0.3)
				);
				if(bnoextremedeath)critdmg=min(critdmg,hitactor.health+1);
				flags|=BLAF_SUCKINGWOUND;
				pen*=2;
				channelwidth*=2;
				hdmobbase.forcepain(hitactor);
				hitactor.damagemobj(
					self,target,critdmg,"melee",
					DMG_THRUSTLESS|DMG_NO_ARMOR
				);
			}
		}else{
			if(frandom(0,pen)>deemedwidth)flags|=BLAF_SUCKINGWOUND;
			hitactor.damagemobj(
				self,target,
				chdmg,
				"melee",DMG_THRUSTLESS|DMG_NO_ARMOR
			);
		}

		//spawn entry and exit wound blood
		if(hitactor){
			if(
				!bbloodlessimpact
				&&chdmg>random(0,1)
			){
				class<actor>hitblood;
				bool noblood=hitactor.bnoblood;
				if(noblood)hitblood="FragPuff";else hitblood=hitactor.bloodtype;
				double ath=angleto(hitactor);
				double zdif=pos.z-hitactor.pos.z;
				bool gbg;actor blood;
				[gbg,blood]=hitactor.A_SpawnItemEx(
					hitblood,
					-hitactor.radius,0,zdif,
					angle:ath,
						flags:SXF_ABSOLUTEANGLE|SXF_USEBLOODCOLOR|SXF_NOCHECKPOSITION|SXF_SETTARGET
				);
				if(blood)blood.vel=-vu*(min(3,0.05*impact))
					+(frandom(-0.6,0.6),frandom(-0.6,0.6),frandom(-0.2,0.4)
				);
				if(!noblood)hitactor.TraceBleedAngle((shockbash>>3),angle+180,-pitch);
				if(flags&BLAF_ALLTHEWAYTHROUGH){
					[gbg,blood]=hitactor.A_SpawnItemEx(
						hitblood,
						hitactor.radius,0,zdif,
						angle:ath+180,
						flags:SXF_ABSOLUTEANGLE|SXF_USEBLOODCOLOR|SXF_NOCHECKPOSITION|SXF_SETTARGET
					);
					if(blood)blood.vel=vu+(frandom(-0.2,0.2),frandom(-0.2,0.2),frandom(-0.2,0.4));
					if(!noblood)hitactor.TraceBleedAngle((shockbash>>3),angle,pitch);
				}
			}
		}

		//fragmentation
		if(!(flags&BLAF_DONTFRAGMENT)&&random(0,100)<woundhealth){
			int fragments=clamp(random(2,(woundhealth>>3)),1,5);
			if(hd_debug)console.printf(fragments.." fragments emerged from bullet");
			while(fragments){
				fragments--;
				let bbb=HDBulletActor(spawn("HDBulletActor",pos));
				bbb.target=target;
				bbb.bincombat=false;
				double newspeed;
				speed*=0.6;
				if(!fragments){
					bbb.mass=mass;
					newspeed=speed;
					bbb.stamina=stamina;
				}else{
					//consider distributing this more randomly between the fragments?
					bbb.mass=max(1,random(1,mass-1));
					bbb.stamina=max(1,random(1,stamina-1));
					newspeed=frandom(0,speed-1);
					mass-=bbb.mass;
					stamina=max(1,stamina-bbb.stamina);
					speed-=newspeed;
				}
				bbb.pushfactor=frandom(0.6,5.);
				bbb.accuracy=random(50,300);
				bbb.angle=angle+frandom(-45,45);
				double newpitch=pitch+frandom(-45,45);
				bbb.pitch=newpitch;
				bbb.A_ChangeVelocity(
					cos(newpitch)*newspeed,0,-sin(newpitch)*newspeed,CVF_RELATIVE|CVF_REPLACE
				);
			}
			bulletdie();
			return;
		}
	}
}
